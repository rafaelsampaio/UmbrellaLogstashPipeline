input {
    s3 {
        access_key_id => "${AWS_ACCESS_KEY_ID}"
        secret_access_key => "${AWS_SECRET_ACCESS_KEY}"
        bucket => "${AWS_S3_BUCKET}"
        region => "${AWS_S3_REGION}"
        prefix => "${AWS_S3_PREFIX}dnslogs/${AWS_S3_SUFIX}"
    }
}

filter {
    mutate {
        add_field => { 
            "[ecs][version]" => "1.5"
            "[organization][name]" => "${CUSTOMER_NAME}"
            "[organization][id]" => "${UMBRELLA_ACCOUNT_NUMBER}"
        }
    }

    csv {
        autogenerate_column_names => false
        columns => [ "Timestamp", "PolicyIdentity", "Identities", "InternalIP", "ExternalIP", "Action",
                     "QueryType", "ResponseCode", "Domain", "Categories", "PolicyIdentityType", "IdentityTypes",
                     "BlockedCategories" ]
    }

    mutate {
        lowercase => [ "Action" ]
    }

    date {
        locale => "en"
        match => [ "Timestamp", "YYYY-MM-dd HH:mm:ss" ]
        timezone => "UTC"
    }

    metrics {
        meter => [ "[metrics][event]", "[metrics][action][%{Action}]" ]
        add_tag => [ "metrics", "metrics_action" ]
        clear_interval => 86400
        flush_interval => 30
        ignore_older_than => 30
    }

    if "Phishing" in [Categories] or "Command and Control" in [Categories] {
        metrics {
            meter => [ "[metrics][security][event]", "[metrics][security][contention]" ]
            add_tag => [ "metrics", "metrics_security", "metrics_security_contention" ]
            clear_interval => 86400
            flush_interval => 30            
            ignore_older_than => 30
        }
        mutate {
            add_tag => [ "security_contention" ]
        }
    }
    if "Malware" in [Categories] or "Cryptomining" in [Categories] or "Dynamic DNS" in [Categories] or "Potentially Harmful" in [Categories] or "Newly Seen Domains" in [Categories] or "DNS Tunneling VPN" in [Categories] or "Unauthorized IP Tunnel Access" in [Categories] {
        metrics {
            meter => [ "[metrics][security][event]", "[metrics][security][prevention]" ]
            add_tag => [ "metrics", "metrics_security", "metrics_security_prevention" ]
            clear_interval => 86400
            flush_interval => 30
            ignore_older_than => 30
        }
        mutate {
            add_tag => [ "security_prevention" ]
        }
    }

    if "metrics" not in [tags] {
        ruby {
            path => "${LOGSTASH_PATH}/scripts/identities.rb"
        }

        ruby {
            path => "${LOGSTASH_PATH}/scripts/custom_timestamp.rb"
        }

        geoip {
            source => "ExternalIP"
            target => "[source][nat][geo]"
            database => "${LOGSTASH_PATH}/maxmind/GeoLite2-City.mmdb"
        }

        geoip {
            source => "ExternalIP"
            target => "[source][as]"
            database => "${LOGSTASH_PATH}/maxmind/GeoLite2-ASN.mmdb"
            default_database_type => "ASN"
        }

        mutate {
            rename => {
                "[source][as][autonomous_system_number]" => "[source][as][number]"
                "[source][as][autonomous_system_organization]" => "[source][as][organization][name]"
            }
        }

        mutate {
            split => {
                "Identities" => ","
                "IdentityTypes" => ","
                "Categories" => ","
                "BlockedCategories" => ","
            }
        }

        if "security_prevention" in [tags] or "security_contention" in [tags] {
            mutate {
                add_field => { 
                    "[event][kind]" => "alert"
                    "[event][severity]" => 1
                }     
            }
        } else {
            mutate {
                add_field => { 
                    "[event][kind]" => "event"
                    "[event][severity]" => 6
                }     
            }
        }

        if [Action] in ["allowed","proxied"] {
            mutate {        
                add_field => { 
                    "[event][type]" => "allowed"
                }
            }
        } else {
            mutate {        
                add_field => { 
                    "[event][type]" => "denied"
                }
            }
        }

        if [QueryType] != "Other" {
            mutate {
                split => {
                    "QueryType" => " "
                }
                add_field => {
                    "[dns][question][type]" => "%{[QueryType][1]}"
                }
                gsub => [ "[dns][question][type]", "^.{1}", "" ]
                gsub => [ "[dns][question][type]", ".{1}$", "" ]               
            }            
        } else {
            mutate {
                add_field => {
                    "[dns][question][type]" => "Other"
                }
            }            
        }

        mutate {        
            add_field => { 
                "[event][category]" => "intrusion_detection"
                "[event][module]" => "cisco_umbrella"
                "[dns][type]" => "query"
                "[observer][type]" => "firewall"
                "[observer][vendor]" => "Cisco"
                "[observer][product]" => "Umbrella"
            }  

            rename => {
                "Identities" => "[source][user][identities]"
                "IdentityTypes" => "[source][user][identity_types]"
                "PolicyIdentity" => "[source][user][policy_identity]"
                "PolicyIdentityType" => "[source][user][policy_identity_type]"
                "InternalIP" => "[source][address]"

                "ExternalIP" => "[source][nat][ip]"

                "ResponseCode" => "[dns][response_code]"
                "Domain" =>  "[dns][question][name]"
                "Categories" => "[dns][categories]"
                "BlockedCategories" => "[dns][blocked_categories]"

                "Action" => "[event][action]"

                "message" => "[event][original]"
            }

            copy => { 
                "[source][user][policy_identity]" => "[source][user][most_granular_identity]"
                "[source][user][policy_identity_type]" => "[source][user][most_granular_identity_type]"
                "[source][address]" => "[source][ip]" 
                "[source][ip]" => "[client][ip]" 
                "[client][ip]" => "[client][address]"

                "[destination][address]" => "[destination][ip]"
            }

            remove_field => [ "Timestamp", "QueryType" ]

        }
    } else {
        mutate {        
            add_field => {
                "[event][type]" => "info"
                "[event][kind]" => "metric"
            }
        } 
    }
}

output {
    if [event][kind] != "metric" {
        elasticsearch {
            hosts => [ "${ELASTICSEARCH_HOSTS}" ]
            user => "${ELASTICSEARCH_USER}"
            password => "${ELASTICSEARCH_PASSWORD}"
            index => "dnslogs-%{+YYYY.MM.dd}"
            action => "index"
            manage_template => true
            template => "${ELASTICSEARCH_TEMPLATES_PATH}/dnslogs-template.json"
            template_name => "dnslogs"
            template_overwrite => true
        }
    } else {
        elasticsearch {
            hosts => [ "${ELASTICSEARCH_HOSTS}" ]
            user => "${ELASTICSEARCH_USER}"
            password => "${ELASTICSEARCH_PASSWORD}"
            index => "metrics-dnslogs-%{+YYYY.MM.dd}"
            action => "index"
            manage_template => true
            template => "${ELASTICSEARCH_TEMPLATES_PATH}/dnslogs-metrics-template.json"
            template_name => "dnslogs-metrics"
            template_overwrite => true
        }
    }
}
