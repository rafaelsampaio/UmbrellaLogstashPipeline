input {
    s3 {
        access_key_id => "${AWS_ACCESS_KEY_ID}"
        secret_access_key => "${AWS_SECRET_ACCESS_KEY}"
        bucket => "${AWS_S3_BUCKET}"
        region => "${AWS_S3_REGION}"
        prefix => "${AWS_S3_PREFIX}cdfw/${AWS_S3_SUFIX}"
    }
}

filter {
    mutate {
        add_field => { 
            "[ecs][version]" => "1.5"
            "[organization][name]" => "${CUSTOMER_NAME}"
            "[organization][id]" => "${UMBRELLA_ACCOUNT_NUMBER}"
        }
    }

    csv {
        autogenerate_column_names => false
        columns => [ "Timestamp", "OriginId", "Identity", "IdentityType", "Direction", "IPProtocol", "PacketSize", "SourceIp", "SourcePort", "DestinationIp", "DestinationPort", "DataCenter", "RuleID", "Verdict" ]
    }

    date {
        match => [ "Timestamp", "YYYY-MM-dd HH:mm:ss" ]
        timezone => "UTC"
    }

    metrics {
        meter => [ "[metrics][event]", "[metrics][action][%{Verdict}]", "[metrics][rule][%{RuleID}]", "[metrics][direction][%{Direction}]" ]
        add_tag => [ "metrics" ]
        clear_interval => 86400
        flush_interval => 30
        ignore_older_than => 30
    }

    if "metrics" not in [tags] {
        ruby {
            path => "${LOGSTASH_PATH}/scripts/custom_timestamp.rb"
        }

        geoip {
            source => "DestinationIP"
            target => "[destination][geo]"
            database => "${LOGSTASH_PATH}/maxmind/GeoLite2-City.mmdb"
        }
        geoip {
            source => "DestinationIP"
            target => "[destination][as]"
            database => "${LOGSTASH_PATH}/maxmind/GeoLite2-ASN.mmdb"
            default_database_type => "ASN"
        }

        if [IPProtocol] = 1 {
            mutate {
                add_field => { 
                    "[network][transport]" => "icmp"
                }
            }
        } else if [IPProtocol] = 17 {
            mutate {
                add_field => { 
                    "[network][transport]" => "udp"
                }
            }
        } else if [IPProtocol] = 46 {
            mutate {
                add_field => { 
                    "[network][transport]" => "tcp"
                }
            }
        }

        mutate {
            add_field => { 
                "[event][category]" => "intrusion_detection"
                "[event][module]" => "cisco_umbrella"
                "[observer][type]" => "firewall"
                "[observer][vendor]" => "Cisco"
                "[observer][product]" => "Umbrella Cloud Firewall"
            }  

            rename => {
                "Identity" => "[source][user][identity]"
                "SourceIP" => "[source][address]"
                "SourcePort" => "[source][port]"
                "IdentityType" => "[source][user][identity_type]"
                "OriginID" => "[network][name]"

                "Direction" => "[networt][direction]"
                "PacketSize" => "[network][bytes]"
                "DataCenter" = > "[observer][hostname]"
                "RuleID" => "[rule][id]"
                "Verdict" => "[event][action]"

                "DestinationIP" => "[destination][address]"
                "DestinationPort" => "[destination][port]"

                "message" => "[event][original]"
            }

            copy => { 
                "[observer][hostname]" => "[host][name]"

                "[source][address]" => "[source][ip]" 
                "[source][ip]" => "[client][ip]" 
                "[client][ip]" => "[client][address]"

                "[destination][address]" => "[destination][ip]"
                "[destination][ip]" => "[server][ip]"
                "[server][ip]" => "[server][address]"                
            }
        }
        mutate {
            remove_field => [ "Timestamp", "IPProtocol" ]
        }
    }  else {
        mutate {        
            add_field => {
                "[event][type]" => "info"
                "[event][kind]" => "metric"
            }
        } 
    }
}

output {
    if "metrics" not in [tags] {
        elasticsearch {
            hosts => [ "${ELASTICSEARCH_HOSTS}" ]
            user => "${ELASTICSEARCH_USER}"
            password => "${ELASTICSEARCH_PASSWORD}"
            index => "cdfwlogs-%{+YYYY.MM.dd}"
            action => "index"
            #manage_template => true
            #template => "${ELASTICSEARCH_TEMPLATES_PATH}/cdfwlogs-template.json"
            #template_name => "cdfwlogs"
            #template_overwrite => true
        }
    } else {
        elasticsearch {
            hosts => [ "${ELASTICSEARCH_HOSTS}" ]
            user => "${ELASTICSEARCH_USER}"
            password => "${ELASTICSEARCH_PASSWORD}"
            index => "metrics-cdfw-%{+YYYY.MM.dd}"
            action => "index"
            #manage_template => true
            #template => "${ELASTICSEARCH_TEMPLATES_PATH}/iplogs-cdfw-template.json"
            #template_name => "cdfwlogs-metrics"
            #template_overwrite => true
        }
    }
}
