input {
    s3 {
        access_key_id => "${AWS_ACCESS_KEY_ID}"
        secret_access_key => "${AWS_SECRET_ACCESS_KEY}"
        bucket => "${AWS_S3_BUCKET}"
        region => "${AWS_S3_REGION}"
        prefix => "${AWS_S3_PREFIX}proxylogs/${AWS_S3_SUFIX}"
    }
}

filter {
    mutate {
        add_field => { 
            "[ecs][version]" => "1.5"
            "[organization][name]" => "${CUSTOMER_NAME}"
            "[organization][id]" => "${UMBRELLA_ACCOUNT_NUMBER}"
        }
    }

    csv {
        autogenerate_column_names => false
        columns => [ "Timestamp", "Identities", "InternalIP", "ExternalIP", "DestinationIP",
                     "ContentType", "Verdict", "URL", "Referer", "userAgent",
                     "statusCode", "requestSize", "responseSize", "responseBodySize",
                     "SHA", "Categories", "AVDetections", "PUAs",
                     "AMPDisposition", "AMPMalwareName", "AMPScore",
                     "IdentityType", "BlockedCategories" ]
    }

    date {
        match => [ "Timestamp", "YYYY-MM-dd HH:mm:ss" ]
        timezone => "UTC"
    }

    mutate {
        lowercase => [ "Verdict" ]
    }

    metrics {
        meter => [ "[metrics][event]", "[metrics][verdict][%{Verdict}]" ]
        add_tag => [ "metrics", "metric_event" ]
        clear_interval => 86400
        flush_interval => 30
        ignore_older_than => 30
    }

    if "Phishing" in [Categories] or "Command and Control" in [Categories] {
        metrics {
            meter => [ "[metrics][security][event]", "[metrics][security][contention]" ]
            add_tag => [ "metrics", "metrics_security", "metrics_security_contention" ]
            clear_interval => 86400
            flush_interval => 30            
            ignore_older_than => 30
        }
        mutate {
            add_tag => [ "security_contention" ]
        }
    }
    if "Malware" in [Categories] or "Cryptomining" in [Categories] or "Dynamic DNS" in [Categories] or "Potentially Harmful" in [Categories] or "Newly Seen Domains" in [Categories] or "DNS Tunneling VPN" in [Categories] or "Unauthorized IP Tunnel Access" in [Categories] {
        metrics {
            meter => [ "[metrics][security][event]", "[metrics][security][prevention]" ]
            add_tag => [ "metrics", "metrics_security", "metrics_security_prevention" ]
            clear_interval => 86400
            flush_interval => 30
            ignore_older_than => 30
        }
        mutate {
            add_tag => [ "security_prevention" ]
        }
    }

    if "metrics" not in [tags] {
        ruby {
            path => "${LOGSTASH_PATH}/scripts/custom_timestamp.rb"
        }

        if [Verdict] == "allowed" {
            mutate {        
                add_field => { 
                    "[event][type]" => "allowed"
                }
            }
        } else {
            mutate {        
                add_field => { 
                    "[event][type]" => "denied"
                }
            }
        }

        if "security_prevention" in [tags] or "security_contention" in [tags] {
            mutate {
                add_field => { 
                    "[event][kind]" => "alert"
                    "[event][severity]" => 1
                }     
            }
        } else {
            mutate {
                add_field => { 
                    "[event][kind]" => "event"
                    "[event][severity]" => 6
                }     
            }
        }
        

        if [InternalIP] == "" {
            mutate {
                update  => { "InternalIP" => "0.0.0.0"}
            }
        }

        if [ExternalIP] == "" {
            mutate {
                update  => { "ExternalIP" => "0.0.0.0" }
            }
        } else {
            geoip {
                source => "ExternalIP"
                target => "[source][nat][geo]"
                database => "${LOGSTASH_PATH}/maxmind/GeoLite2-City.mmdb"
            }
            geoip {
                source => "ExternalIP"
                target => "[source][as]"
                database => "${${LOGSTASH_PATH}/maxmind/GeoLite2-ASN.mmdb}"
                default_database_type => "ASN"
            }
            mutate {
                rename => {
                    "[source][as][autonomous_system_number]" => "[source][as][number]"
                    "[source][as][autonomous_system_organization]" => "[source][as][organization][name]"
                }
            }
        }

        useragent {
            source => "userAgent"
            target => "user_agent"
            regexes => "${PROXYLOGS_REGEXES}"
        }

        if [DestinationIP] == "" {
            mutate {
                update  => { "DestinationIP" => "0.0.0.0"}
            }
        } else {
            geoip {
                source => "DestinationIP"
                target => "[destination][geo]"
                database => "${LOGSTASH_PATH}/maxmind/GeoLite2-City.mmdb"
            }
            geoip {
                source => "DestinationIP"
                target => "[destination][as]"
                database => "${LOGSTASH_PATH}/maxmind/GeoLite2-ASN.mmdb"
                default_database_type => "ASN"
            }
            mutate {
                rename => {
                    "[destination][as][autonomous_system_number]" => "[destination][as][number]"
                    "[destination][as][autonomous_system_organization]" => "[destination][as][organization][name]"
                }
            }
        }

        mutate {
            add_field => { 
                "[event][category]" => "intrusion_detection"
                "[event][module]" => "cisco_umbrella"  
                "[observer][type]" => "firewall"
                "[observer][vendor]" => "Cisco"
                "[observer][product]" => "Umbrella Intelligent Proxy"
            }  

            rename => {
                "userAgent" => "[user_agent][original]"
            }

            split => {
                "Categories" => ","
                "BlockedCategories" => ","
                "AVDetections" => ","
                "PUAs" => ","
            }
 
            rename => {
                "InternalIP" => "[source][address]"
                "Identities" => "[source][user][identities]"
                "IdentityType" => "[source][user][identity_type]"
                "ExternalIP" => "[source][nat][ip]"

                "DestinationIP" => "[destination][address]"
                
                "URL" => "[request][url]"
                "Referer" => "[request][referer]"
                "requestSize" => "[request][request_size]"
                "Categories" => "[request][categories]"

                "Verdict" => "[event][action]"

                "statusCode" => "[response][status_code]"
                "ContentType" => "[response][content_type]"
                "responseSize" => "[response][bytes]"
                "responseBodySize" => "[response][response_body_size]"
                "SHA" => "[response][content][sha]"
                "AVDetections" => "[response][content][av_detections]"
                "PUAs" => "[response][content][puas]"
                "AMPDisposition" => "[response][content][amp_disposition]"
                "AMPMalwareName" => "[response][content][amp_malware_name]"
                "AMPScore" => "[response][content][amp_score]"
                "BlockedCategories" => "[response][blocked_categories]"

                "message" => "[event][original]"
            }

            copy => {
                "[source][address]" => "[source][ip]"
                "[source][ip]" => "[client][ip]" 
                "[client][ip]" => "[client][address]"
                
                "[destination][address]" => "[destination][ip]"
                "[destination][ip]" => "[server][ip]"
                "[server][ip]" => "[server][address]"

                "[request][url]" => "[url][original]"
                "[url][original]" => "[url][full]"
            }

            remove_field => [ "Timestamp" ]
        }
    } else {
        mutate {        
            add_field => {
                "[event][type]" => "info"
                "[event][kind]" => "metric"
            }
        } 
    }
}

output {
    if "metric" not in [event][kind] {
        elasticsearch {
            hosts => [ "${ELASTICSEARCH_HOSTS}" ]
            user => "${ELASTICSEARCH_USER}"
            password => "${ELASTICSEARCH_PASSWORD}"
            index => "proxylogs-%{+YYYY.MM.dd}"
            action => "index"
            manage_template => true
            template => "${ELASTICSEARCH_TEMPLATES_PATH}/proxylogs-template.json"
            template_name => "proxylogs"
            template_overwrite => true
        }
    } else {
        elasticsearch {
            hosts => [ "${ELASTICSEARCH_HOSTS}" ]
            user => "${ELASTICSEARCH_USER}"
            password => "${ELASTICSEARCH_PASSWORD}"
            index => "metrics-proxylogs-%{+YYYY.MM.dd}"
            action => "index"
            manage_template => true
            template => "${ELASTICSEARCH_TEMPLATES_PATH}/proxylogs-metrics-template.json"
            template_name => "proxylogs_metrics"
            template_overwrite => true
        }
    }
}
